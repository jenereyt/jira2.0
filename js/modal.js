import { tasks, createTable } from './table.js';
import { getAllExecutors } from './utils.js';
import { applyFilters } from './utils.js'; // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç applyFilters
import { filters, sortState } from './data.js'; // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç filters –∏ sortState

export function openGlobalExecutorModal() {
    const modal = document.createElement("div");
    modal.className = "modal";

    // Get all executors
    const allExecutors = getAllExecutors();

    modal.innerHTML = `
        <div class="modal-contente">
            <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏</h2>
            
            <!-- –°–µ–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è -->
            <div class="add-executor-section">
                <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</h3>
                <div class="input-with-clear">
                    <input type="text" id="newGlobalExecutor" placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è">
                    <button id="saveGlobalExecutor" class="action-btn">–î–æ–±–∞–≤–∏—Ç—å</button>
                </div>
                <div class="suggestions" id="globalExecutorSuggestions"></div>
            </div>
            
            <!-- –°–µ–∫—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π -->
            <div class="all-executors-section">
                <h3>–°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</h3>
                <div class="executors-list" id="allExecutorsList">
                    ${allExecutors.map(executor => `
                        <div class="executor-list-item" data-executor="${executor}">
                            <span class="executor-name">${executor}</span>
                            <div class="executor-actions">
                                <button class="edit-executor-btn" data-executor="${executor}">‚úèÔ∏è</button>
                                <button class="delete-executor-btn" data-executor="${executor}">üóëÔ∏è</button>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
            
            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–∫—Ä—ã—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
            <div id="editExecutorPanel" class="edit-executor-panel hidden">
                <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</h3>
                <input type="text" id="editExecutorInput">
                <input type="hidden" id="originalExecutorName">
                <div class="modal-buttons">
                    <button id="saveEditExecutor">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    <button id="cancelEditExecutor">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
            
            <div class="modal-buttons">
                <button id="closeGlobalModal">–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    const input = modal.querySelector("#newGlobalExecutor");
    const suggestions = modal.querySelector("#globalExecutorSuggestions");

    input.addEventListener("input", (e) => {
        const value = e.target.value.toLowerCase();
        suggestions.innerHTML = "";
        if (value) {
            const matches = allExecutors.filter(ex => ex.toLowerCase().includes(value) && !tasks.some(t => t.executors.includes(ex)));
            matches.forEach(match => {
                const div = document.createElement("div");
                div.textContent = match;
                div.className = "suggestion-item";
                div.style.cursor = "pointer";
                div.addEventListener("click", () => {
                    input.value = match;
                    suggestions.innerHTML = "";
                });
                suggestions.appendChild(div);
            });
        }
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    modal.querySelector("#saveGlobalExecutor").addEventListener("click", () => {
        const newExecutor = input.value.trim();
        if (newExecutor && !allExecutors.includes(newExecutor)) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ø–∞–ª –≤ –ø—É–ª
            tasks.push({
                id: tasks.length + 1,
                dateSet: new Date().toISOString().split("T")[0],
                project: "–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞",
                theme: "–ë–µ–∑ —Ç–µ–º—ã",
                description: "–§–∏–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
                completed: false,
                executors: [newExecutor],
                dateCompleted: "",
                accepted: "–ù–µ—Ç",
                comments: [],
                files: []
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            refreshExecutorsList(modal);
            input.value = "";
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    modal.querySelectorAll(".edit-executor-btn").forEach(btn => {
        btn.addEventListener("click", (e) => {
            const executor = e.target.dataset.executor;
            const editPanel = modal.querySelector("#editExecutorPanel");
            const editInput = modal.querySelector("#editExecutorInput");
            const originalInput = modal.querySelector("#originalExecutorName");

            editInput.value = executor;
            originalInput.value = executor;
            editPanel.classList.remove("hidden");
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
    modal.querySelectorAll(".delete-executor-btn").forEach(btn => {
        btn.addEventListener("click", (e) => {
            const executor = e.target.dataset.executor;
            if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è "${executor}"?`)) {
                // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –∑–∞–¥–∞—á
                tasks.forEach(task => {
                    task.executors = task.executors.filter(ex => ex !== executor);
                });
                refreshExecutorsList(modal);
            }
        });
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    modal.querySelector("#saveEditExecutor").addEventListener("click", () => {
        const newName = modal.querySelector("#editExecutorInput").value.trim();
        const originalName = modal.querySelector("#originalExecutorName").value;

        if (newName && newName !== originalName && !allExecutors.includes(newName)) {
            // –ó–∞–º–µ–Ω—è–µ–º –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö –∑–∞–¥–∞—á–∞—Ö
            tasks.forEach(task => {
                task.executors = task.executors.map(ex => ex === originalName ? newName : ex);
            });

            modal.querySelector("#editExecutorPanel").classList.add("hidden");
            refreshExecutorsList(modal);
        }
    });

    // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    modal.querySelector("#cancelEditExecutor").addEventListener("click", () => {
        modal.querySelector("#editExecutorPanel").classList.add("hidden");
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.querySelector("#closeGlobalModal").addEventListener("click", () => modal.remove());
}

export function openEditModal(task) {
    const modal = document.createElement("div");
    modal.className = "modal";

    if (!task.comments) task.comments = [];
    if (!task.files) task.files = [];

    const statuses = ["–ü—Ä–∏–Ω—è—Ç–æ", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ", "–ü—Ä–∏–Ω—è—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫–æ–º", "–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–æ", "–í–æ–∑–≤—Ä–∞—â–µ–Ω"];

    modal.innerHTML = `
          <div class="modal-content full-task-modal">
    <div class="modal-header">
        <h2>–ó–∞–¥–∞—á–∞ #${task.id}</h2>
        <span>–û—Ç: ${task.dateSet}</span>
        <span>–ü—Ä–æ–µ–∫—Ç: ${task.project}</span>
        <div class="header-details">
            <div class="status-toggle">
                <select id="statusSelect">
                    ${statuses.map(status => `
                        <option value="${status}" ${task.status === status ? 'selected' : ''}>${status}</option>
                    `).join('')}
                </select>
                <button id="openExtraModalBtn">–ò—Å—Ç–æ—Ä–∏—è</button>
            </div>
        </div>
        <button class="close-modal-btn" id="closeModalBtn">√ó</button>
    </div>
            <div class="task-details">
                <div class="field theme">
                    <label>–¢–µ–º–∞:</label>
                    <div class="editable-field">
                        <span id="themeDisplay">${task.theme}</span>
                        <input type="text" id="editTheme" value="${task.theme}" class="hidden">
                        <button class="edit-btn" data-field="theme">‚úèÔ∏è</button>
                    </div>
                </div>
                <div class="field">
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                    <div class="editable-field">
                        <span id="descriptionDisplay">${task.description}</span>
                        <textarea id="editDescription" class="hidden">${task.description}</textarea>
                        <button class="edit-btn" data-field="description">‚úèÔ∏è</button>
                    </div>
                </div>
                <div class="field">
                    <label>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</label>
                    <div id="executorList" class="executor-list" style="display: flex; align-items: center; gap: 5px;">
                        ${task.executors.length ? task.executors.map(ex => `
                            <span class="executor-item" style="padding: 2px 5px; background: #f0f0f0; border-radius: 3px;">
                                ${ex}
                                <button class="edit-executor" data-executor="${ex}" style="border: none; background: none; cursor: pointer; margin-left: 5px;">‚úèÔ∏è</button>
                                <button class="remove-executor" data-executor="${ex}" style="border: none; background: none; cursor: pointer;">√ó</button>
                            </span>
                        `).join('') : '<span class="executor-item" style="padding: 2px 5px; background: #f0f0f0; border-radius: 3px;">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã</span>'}
                        <button class="add-executor-btn" style="border: none; cursor: pointer; font-size: 16px;">+</button>
                    </div>
                </div>
                <div class="field comments">
                    <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</label>
                    <div id="commentList">
                        ${task.comments.map((comment, index) => `
                            <div class="comment-item">
                                ${comment.text} 
                                <small>(${comment.date})</small>
                                <button class="remove-comment" data-index="${index}">√ó</button>
                            </div>
                        `).join('')}
                    </div>
                    <textarea id="newComment" placeholder="–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"></textarea>
                    <button id="addComment">–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</button>
                </div>
                <div class="field files">
                    <label>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</label>
                    <div id="fileList">
                        ${task.files.length ? task.files.map(file => `
                            <div class="file-item">
                                <a href="${file.url}" target="_blank">${file.name}</a>
                            </div>
                        `).join('') : '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤'}
                    </div>
                </div>
            </div>
            <div class="modal-buttons">
                <button id="saveBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                <button id="closeBtn">–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
        </div>
    `;
    document.body.appendChild(modal);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
    const statusSelect = modal.querySelector("#statusSelect");
    statusSelect.addEventListener("change", () => {
        task.status = statusSelect.value;
    });

    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –º–æ–¥–∞–ª–∫–∏
    modal.querySelector("#openExtraModalBtn").addEventListener("click", (e) => {
        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
        alert("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤–∞—è –º–æ–¥–∞–ª–∫–∞ –≤ –±—É–¥—É—â–µ–º!");
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
    modal.addEventListener("click", function (event) {
        if (!modal.querySelector(".modal-content").contains(event.target)) {
            modal.remove();
        }
    });

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    modal.querySelectorAll(".edit-btn").forEach(btn => {
        btn.addEventListener("click", (e) => {
            e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
            const field = btn.dataset.field;
            const display = modal.querySelector(`#${field}Display`);
            const input = modal.querySelector(`#edit${field.charAt(0).toUpperCase() + field.slice(1)}`);

            display.classList.toggle("hidden");
            input.classList.toggle("hidden");
            btn.textContent = display.classList.contains("hidden") ? "üíæ" : "‚úèÔ∏è";

            if (!display.classList.contains("hidden")) {
                task[field] = input.value;
                display.textContent = task[field];
            }
        });
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –±–∞–≥–∞
    const removeExecutorHandler = (btn) => {
        btn.addEventListener("click", (e) => {
            e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –¥–æ modal
            const executor = btn.dataset.executor;
            task.executors = task.executors.filter(ex => ex !== executor);
            btn.parentElement.remove();
            if (!task.executors.length) {
                const executorList = modal.querySelector("#executorList");
                const noExecutorsSpan = document.createElement("span");
                noExecutorsSpan.className = "executor-item";
                noExecutorsSpan.style.cssText = "padding: 2px 5px; background: #f0f0f0; border-radius: 3px;";
                noExecutorsSpan.textContent = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã";
                executorList.insertBefore(noExecutorsSpan, executorList.querySelector(".add-executor-btn"));
            }
        });
    };
    modal.querySelectorAll(".remove-executor").forEach(removeExecutorHandler);

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    const editExecutorHandler = (btn) => {
        btn.addEventListener("click", (e) => {
            e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
            const oldExecutor = btn.dataset.executor;
            const executorItem = btn.parentElement;
            const originalContent = executorItem.innerHTML;

            const select = document.createElement("select");
            select.className = "executor-select";
            select.innerHTML = `
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
                ${getAllExecutors().filter(ex => !task.executors.includes(ex) || ex === oldExecutor).map(exec => `
                    <option value="${exec}" ${exec === oldExecutor ? 'selected' : ''}>${exec}</option>
                `).join('')}
            `;

            const cancelBtn = document.createElement("button");
            cancelBtn.textContent = "‚ü≤";
            cancelBtn.style.cssText = "border: none; background: #4a90e2; cursor: pointer; margin-left: 5px;";
            cancelBtn.title = "–û—Ç–º–µ–Ω–∏—Ç—å";

            executorItem.innerHTML = '';
            executorItem.appendChild(select);
            executorItem.appendChild(cancelBtn);

            select.addEventListener("change", (e) => {
                e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
                const newExecutor = e.target.value;
                if (newExecutor && newExecutor !== oldExecutor) {
                    const index = task.executors.indexOf(oldExecutor);
                    if (index !== -1) {
                        task.executors[index] = newExecutor;
                    }
                    executorItem.innerHTML = `
                        ${newExecutor}
                        <button class="edit-executor" data-executor="${newExecutor}" style="border: none; background: none; cursor: pointer; margin-left: 5px;">‚úèÔ∏è</button>
                        <button class="remove-executor" data-executor="${newExecutor}" style="border: none; background: none; cursor: pointer;">√ó</button>
                    `;
                    editExecutorHandler(executorItem.querySelector(".edit-executor"));
                    removeExecutorHandler(executorItem.querySelector(".remove-executor"));
                }
            });

            cancelBtn.addEventListener("click", (e) => {
                e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
                executorItem.innerHTML = originalContent;
                editExecutorHandler(executorItem.querySelector(".edit-executor"));
                removeExecutorHandler(executorItem.querySelector(".remove-executor"));
            });
        });
    };
    modal.querySelectorAll(".edit-executor").forEach(editExecutorHandler);

    const addExecutorBtn = modal.querySelector(".add-executor-btn");
    addExecutorBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        const executorList = modal.querySelector("#executorList");
        const existingSelect = executorList.querySelector("select");
        if (existingSelect) return;

        const noExecutorsSpan = executorList.querySelector("span.executor-item");
        if (noExecutorsSpan && noExecutorsSpan.textContent === "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã") {
            noExecutorsSpan.remove();
        }

        const select = document.createElement("select");
        select.className = "executor-select";
        select.innerHTML = `
        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ...</option>
        ${getAllExecutors()
                .filter(ex => !task.executors.includes(ex)) // –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö
                .sort((a, b) => a.localeCompare(b)) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                .map(exec => `
                <option value="${exec}">${exec}</option>
            `).join('')}
    `;

        const removeSelectBtn = document.createElement("button");
        removeSelectBtn.textContent = "√ó";

        const container = document.createElement("div");
        container.style.cssText = "display: flex; align-items: center; gap: 5px;";
        container.appendChild(select);
        container.appendChild(removeSelectBtn);

        executorList.insertBefore(container, addExecutorBtn);

        select.addEventListener("change", (e) => {
            e.stopPropagation();
            const selectedExecutor = e.target.value;
            if (selectedExecutor) {
                task.executors.push(selectedExecutor);
                const span = document.createElement("span");
                span.className = "executor-item";
                span.style.cssText = "padding: 2px 5px; background: #f0f0f0; border-radius: 3px;";
                span.innerHTML = `
                ${selectedExecutor}
                <button class="edit-executor" data-executor="${selectedExecutor}" style="border: none; background: none; cursor: pointer; margin-left: 5px;">‚úèÔ∏è</button>
                <button class="remove-executor" data-executor="${selectedExecutor}" style="border: none; background: none; cursor: pointer;">√ó</button>
            `;
                executorList.insertBefore(span, addExecutorBtn);
                container.remove();
                editExecutorHandler(span.querySelector(".edit-executor"));
                removeExecutorHandler(span.querySelector(".remove-executor"));
            }
        });

        removeSelectBtn.addEventListener("click", (e) => {
            e.stopPropagation();
            container.remove();
            if (!task.executors.length) {
                const noExecutorsSpan = document.createElement("span");
                noExecutorsSpan.className = "executor-item";
                noExecutorsSpan.style.cssText = "padding: 2px 5px; background: #f0f0f0; border-radius: 3px;";
                noExecutorsSpan.textContent = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã";
                executorList.insertBefore(noExecutorsSpan, addExecutorBtn);
            }
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    modal.querySelector("#addComment").addEventListener("click", (e) => {
        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
        const commentText = modal.querySelector("#newComment").value.trim();
        if (commentText) {
            task.comments.push({
                text: commentText,
                date: new Date().toLocaleDateString()
            });
            updateCommentList(task, modal);
        }
    });

    updateCommentList(task, modal);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    modal.querySelector("#saveBtn").addEventListener("click", (e) => {
        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
        task.status = statusSelect.value;
        applyFilters();
        modal.remove();
    });

    modal.querySelector("#closeBtn").addEventListener("click", (e) => {
        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
        modal.remove();
    });
    modal.querySelector("#closeModalBtn").addEventListener("click", (e) => {
        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
        modal.remove();
    });
}

export function updateExecutorList(task, modal) {
    const executorList = modal.querySelector("#executorList");
    const allExecutors = getAllExecutors();
    executorList.innerHTML = `
        ${task.executors.length ? task.executors.map(ex => `
            <div class="executor-item">
                <span>${ex}</span>
                <button class="remove-executor" data-executor="${ex}">√ó</button>
            </div>
        `).join('') : '<span>–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã</span>'}
        <select id="addExecutorSelect">
            <option value="">–î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</option>
            ${allExecutors.filter(ex => !task.executors.includes(ex)).map(ex => `
                <option value="${ex}">${ex}</option>
            `).join('')}
        </select>
    `;

    // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    const addExecutorSelect = modal.querySelector("#addExecutorSelect");
    addExecutorSelect.addEventListener("change", (e) => {
        const newExecutor = e.target.value;
        if (newExecutor && !task.executors.includes(newExecutor)) {
            task.executors.push(newExecutor);
            updateExecutorList(task, modal);
        }
        e.target.value = "";
    });

    modal.querySelectorAll(".remove-executor").forEach(btn => {
        btn.addEventListener("click", () => {
            const executor = btn.dataset.executor;
            task.executors = task.executors.filter(ex => ex !== executor);
            updateExecutorList(task, modal);
        });
    });
}

export function updateCommentList(task, modal) {
    const commentList = modal.querySelector("#commentList");
    commentList.innerHTML = task.comments.map((comment, index) => `
        <div class="comment-item">
            ${comment.text} 
            <small>(${comment.date})</small>
            <button class="remove-comment" data-index="${index}">√ó</button>
        </div>
    `).join('');
    modal.querySelector("#newComment").value = "";

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –∫–Ω–æ–ø–∫–∞–º —É–¥–∞–ª–µ–Ω–∏—è
    modal.querySelectorAll(".remove-comment").forEach(btn => {
        btn.addEventListener("click", (event) => {
            event.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
            const index = parseInt(btn.dataset.index);
            if (index >= 0 && index < task.comments.length) {
                task.comments.splice(index, 1); // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                updateCommentList(task, modal); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            }
        });
    });
}

export function refreshExecutorsList(modal) {
    const allExecutors = getAllExecutors();
    const listContainer = modal.querySelector("#allExecutorsList");

    listContainer.innerHTML = allExecutors.map(executor => `
        <div class="executor-list-item" data-executor="${executor}">
            <span class="executor-name">${executor}</span>
            <div class="executor-actions">
                <button class="edit-executor-btn" data-executor="${executor}">‚úèÔ∏è</button>
                <button class="delete-executor-btn" data-executor="${executor}">üóëÔ∏è</button>
            </div>
        </div>
    `).join('');

    // –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    modal.querySelectorAll(".edit-executor-btn").forEach(btn => {
        btn.addEventListener("click", (e) => {
            const executor = e.target.dataset.executor;
            const editPanel = modal.querySelector("#editExecutorPanel");
            const editInput = modal.querySelector("#editExecutorInput");
            const originalInput = modal.querySelector("#originalExecutorName");

            editInput.value = executor;
            originalInput.value = executor;
            editPanel.classList.remove("hidden");
        });
    });

    modal.querySelectorAll(".delete-executor-btn").forEach(btn => {
        btn.addEventListener("click", (e) => {
            const executor = e.target.dataset.executor;
            if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è "${executor}"?`)) {
                // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –∑–∞–¥–∞—á
                tasks.forEach(task => {
                    task.executors = task.executors.filter(ex => ex !== executor);
                });
                refreshExecutorsList(modal);
            }
        });
    });
}